7.1 面向对象概述
7.1.1 什么是对象
//随处可见的世物，就是对象。
//通常将对象划分为两部分，即动态部分与静态部分
//静态部分又被称为：属性
//动态部分又被称为：行为
以面向对象的思想解决问题的步骤：
a:首先从这一问题中抽象出对象，这里是大雁。
b:识别这个对象的属性，对象具备的属性都是静态属性，如大雁有一对翅膀，黑色的羽毛。
c:识别这个对象的动态行为，如这只大雁可以进行.觅食，飞行。
d:别出这个对象的动态和行为后，这个对象就被定义完成识，

7.1.2 什么是类
//类就是一类事物的统称，如果将现实世界中的一个事物抽象成对象，类就是这类对象的统称。
//类是封装对象的属性和行为的载体，反过来说，具有相同属性和行为的一类实体被称为类。
//在Java语言中，类中对象的行为是以方法的形式定义的，对象的属性是以成员变量的形式定义的，而类包括对象的属性和方法。

7.1.3 面向对象的特点
a:封装
//封装是面向对象的核心思想，将对象的属性和行为封装起来，而将对象的属性和行为封装起来的载体就是类，类通常对客户隐藏其实现细节，这就是封装的思想。
//采用封装的思想保证了类内部数据结构的完整性。
b:继承
//继承性主要利用特定对象之间的共有属性。
c:多态
//将父类对象应用于子类的特征就是多态。
//多态的实现并不依赖于类而是依赖于抽象类，和接口。

7.2 类
7.2.1 类的构造方法
//构造方法是一个与类同名的方法，对象的创建就是通过构造方法完成的，每当类实例化一个对象时，类都会自动调用构造方法。
//构造方法的特点
a:构造方法没有返回值。
b:构造方法的返回值要与本类的名称相同。
public book(){
  //构造方法体
}
//public构造方法修饰符
//book构造方法的名称
注：如果在类中定义的构造方法都不是无参的构造方法，则编译器不会为类设置一个默认的无参的构造方法，当试图调用无参构造方法
实例化一个对象时，编译器会报错，所以只有在类中没有定义任何构造方法时，编译器才会在该类中定义一个无参的构造方法。

7.2.2 类的主方法
public static void main(String args[]){
   //方法体
}
//主方法体是静态，要直接在主方法中调用其它方法，则该方法也必须是静态的。
//主方法没有返回值
//主方法的形参为数组

7.2.3 成员变量
//在java语言中对象的属性称为成员变量，也可以称为属性。

7.2.4 成员方法
//在java语言中使用成员方法对应于类对象的行为。
权限修饰符 返回值类型 方法名(参数类型 参数名){
   //方法体
   return 返回值;
 }
//java语言中成员方法无返回值可以使用void关键字表示。
//在成员方法中可以调用其它成员方法和类成员变量。
//如果一个方法中含有与成员变量同名的局部变量，则该方法中对这个变量的访问以局部变量进行访问。

7.2.5 局部变量
//如果在成员方法内定义一个变量，那么该变量就被称为局部变量。
//局部变量在方法被执行时创建，在该方法执行结束时被销毁。
//局部变量在使用时必须进行赋值操作或被初始化，否则会出现编译错误。

7.2.6 局部变量的有效范围
//可以将局部变量的有效范围称为变量的作用域。
//局部变量的有效范围从该变量的声明开始，到该变量的结束为止。
7.2.7 静态变量，常量和方法
//static关键字修饰的变量，常量和方法，被称为静态的变量，常量和方法。
//被声明为static的变量，常量和方法被称为静态成员。
//静态成员是属于类所有的，区别于个别对象，可以在本类或其它类使用类名和.运算符调用静态成员。
类名.静态类成员
//虽然静态成员也可以使用，"对象.静态成员"的形式进行调用，但这样的方式不被鼓励使用，因为这样容易混淆静态成员和非静态成员。
a:在静态方法中不可以使用this关键字
b:在静态方法中不可以直接调用非静态方法
c:在java语言中不能将方法体中的局部变量声明为static
d:如果在执行类时，希望先执行类的初始化动作，可以使用static定义一个静态区域
eg:public class Example{
     static{
     }
  }
7.2.8 权限修饰符
          表7.1java语言中的修饰符
  访问包位置       类修饰符
                 private      protected    public
本类              可见         可见          可见
同包其它类或子类    不可见        可见          可见
其它包的类或子类    不可见       不可见         可见
//
